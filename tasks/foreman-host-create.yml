---
#- name: Gather and delegate facts for Foreman build server
#  setup:
#  delegate_to: "{{ item }}"
#  delegate_facts: True
#  loop: "{{ groups['foreman'] }}"
#  run_once: true

- name: Query foreman hosts
  shell: hammer --no-headers -r host list --fields name | tr -d ' '
  register: hostlist

- name: print hostlist
  debug:
    msg: "{{ hostlist }}"
    verbosity: 1

- name: Get host build status
  shell: |
    hammer -r host info --name {{ item.name }}.{{ www_domain }} | egrep -i '(build status)' | sed -r 's/^.*:\s+(\w.*)$/\1/'
  register: buildstatus
  loop: "{{ foreman_hosts }}"
  when: item.name + '.' + www_domain in hostlist.stdout_lines

- name: print buildstatus results
  debug:
    msg: "{{ item }}"
    verbosity: 1
  loop: "{{ buildstatus.results }}"
  when: item.changed


- name: "Create hosts via hammer cli"
  command: >
    {% if item.item.name + '.' + www_domain not in hostlist.stdout_lines %}
    {% set interface_cmd = '{}' %}
    hammer -r host create --name '{{ item.item.name }}' --build '1'
    --location 'Default Location' --organization 'Default Organization'
    {% if item.item.hostgroup is defined %}
    --hostgroup '{{ item.item.hostgroup }}'
    {% if item.item.operatingsystem is defined %}
    --operatingsystem '{{ item.item.operatingsystem }}'
    {% for os in foreman_operatingsystems %}
    {% if os.description == item.item.operatingsystem %}
    --medium '{{ os.media }}'
    --partition-table '{{ os.ptables[0] }}'
    {% endif %}
    {% endfor %}
    {% endif %}
    {% else %}
    {% for hg in foreman_hostgroups %}
    {% if hg.name == item.item.hostgroup %}
    --operatingsystem '{{ hg.operatingsystem }}'
    --medium '{{ hg.medium }}'
    --partition-table '{{ hg.ptable }}'
    {% endif %}
    {% endfor %}
    {% endif %}
    {% if item.item.subnet is defined %}
    --subnet '{{ item.item.subnet }}'
    {% endif %}
    {% if item.item.provider is defined and item.item.provider == "kvm" %}
    --compute-resource '{{ item.item.compute_resource }}'
    --compute-attributes '{
    "cpus": {{ item.item.cpu_cores }},
    "memory": {{ item.item.memory | regex_replace("^([0-9]+)\s+?.*$", "\1GB") | human_to_bytes }},
    "start": "0"
    }'
    --volume '{
    "capacity": {{ (item.item.disk_size | regex_replace("^([0-9]+)\s+?.*$", "\1GB") | human_to_bytes // 1073741824) }},
    "format_type": "qcow2"
    }'
    {% set interface_cmd = interface_cmd | from_json | combine({ 'compute_bridge': 'br' + ( item.item.vlan_id|default("0") ) },
      { 'compute_model': 'virtio' },
      { 'compute_type': 'bridge' }) | to_json %}
    {% endif %}
    {% if item.item.ip is defined %}
    {% set interface_cmd = interface_cmd | from_json | combine({ 'ip': item.item.ip }) | to_json %}
    {% endif %}
    {% if item.item.interface is defined %}
    {% set interface_cmd = interface_cmd | from_json | combine({ 'identifier': item.item.interface }) | to_json %}
    {% endif %}
    {% if item.item.mac_address is defined %}
    {% set interface_cmd = interface_cmd | from_json | combine({ 'mac': item.item.mac_address }) | to_json %}
    {% endif %}
    --interface {{ interface_cmd | to_json }}
    {% if item.item.provider is defined and item.item.provider == "ipmi" %}
    --interface '{
    "ip": "{{ item.item.ipmi_ip }}",
    "mac": "{{ item.item.ipmi_mac_address }}",
    "type": "bmc",
    "provider": "ipmi",
    "username": "{{ item.item.ipmi_username }}",
    "password": "{{ item.item.ipmi_password }}"
    }'
    {% endif %}
    {% else %}
    {% if "Pending" not in item.stdout %}
    hammer -r host update --name {{ item.item.name }}.{{ www_domain }} --build '1'
    {% else %}
    hammer -qr host info --name {{ item.item.name }}.{{ www_domain }}
    {% endif %}
    {% endif %}
  loop: "{{ buildstatus.results }}"
  register: foreman_hosts_created
  changed_when: foreman_hosts_created.stdout == "Host updated." or foreman_hosts_created.stdout == "Host created."

- name: print host-create results
  debug:
    msg: "{{ item }}"
    verbosity: 1
  loop: "{{ foreman_hosts_created.results  }}"

- name: Get host power status
  shell: |
    hammer -r host status --name {{ item.item.item.name }}.{{ www_domain }} | grep -i power | awk '{print $2}'
  register: powerstatus
  loop: "{{ foreman_hosts_created.results  }}"
  when:
    - item.changed
    - ( item.item.item.provider == "ipmi" or
      item.item.item.provider == "kvm" )

- name: print power status results
  debug:
    msg: "{{ item }}"
    verbosity: 1
  loop: "{{ powerstatus.results }}"
  when:
    - ( item.item.item.item.provider == "ipmi" or
      item.item.item.item.provider == "kvm" )

#- name: Set host to boot from network device
#  command: >
#    hammer -r host boot --device pxe --name {{ item.item.item.name }}.{{ www_domain }}
#  loop:
#    "{{ foreman_hosts_created.results }}"
#  when:
#    - item.changed
#    - item.item.item.provider == "ipmi"

- name: Set Boot Device to PXE (ipmi)
  command: >
    ipmitool -I lanplus
     -U {{ item.item.item.item.ipmi_username }}
     -P {{ item.item.item.item.ipmi_password }}
     -H {{ item.item.item.item.ipmi_ip }}
     chassis bootdev pxe options=persistent,verbose=yes,cons_redirect=enable
  loop: "{{ powerstatus.results }}"
  when:
    - item.changed
    - item.item.item.item.provider == "ipmi"

- name: Host Power-Cycle
  command: >
    hammer -r host
    {% if item.stdout == "off" %}
    start
    {% else %}
    reset
    {% endif %}
    --name {{ item.item.item.item.name }}.{{ www_domain }}
  loop: "{{ powerstatus.results }}"
  when:
    - item.changed
    - ( item.item.item.item.provider == "ipmi" or
      item.item.item.item.provider == "kvm" )
