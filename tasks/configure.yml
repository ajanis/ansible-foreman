---

- name: Generate foreman settings config from template
  template:
    src: etc/foreman/settings.yaml.j2
    dest: "{{ foreman_config_dir }}/settings.yaml"
    mode: 0755
    backup: yes
  notify: restart foreman
  register: settings_config

- name: Ensure .hammer directory exists
  file:
    state: directory
    path: /root/.hammer
    mode: 750

- name: Generate hammer-cli authentication file
  template:
    src: hammer/cli_config.yml.j2
    dest: /root/.hammer/cli_config.yml
    mode: 644

- name: get foreman-proxy user info
  getent:
    database: passwd
    key: "{{ foreman_proxy_user }}"

- name: set foreman-proxy user home directory
  set_fact:
    foreman_proxy_user_homedir: "{{ getent_passwd[foreman_proxy_user][4] }}"

- name: Create foreman-proxy user ssh directory
  file:
    path: "/var/lib/foreman-proxy/ssh"
    state: directory
    owner: "{{ foreman_proxy_user }}"
    group: "{{ foreman_proxy_user }}"
    mode: 0755

- name: Ensure foreman-proxy .ssh symlink exists
  file:
    state: link
    src: /var/lib/foreman-proxy/ssh
    dest: "{{ foreman_proxy_user_homedir }}/.ssh"
    owner: "{{ foreman_proxy_user }}"
    group: "{{ foreman_proxy_user }}"

- name: Copy foreman-proxy user ssh config
  copy:
    owner: "{{ foreman_proxy_user }}"
    group: "{{ foreman_proxy_user }}"
    mode: 0755
    dest: "{{ foreman_proxy_user_homedir }}/.ssh/config"
    content: |
      StrictHostKeyChecking no
      UserKnownHostsFile /dev/null

- name: Copy ssh private key to server
  copy:
    mode: 0600
    owner: "{{ foreman_proxy_user }}"
    group: "{{ foreman_proxy_user }}"
    content: "{{ foreman_ssh_private_key }}"
    dest: "{{ foreman_proxy_user_homedir }}/.ssh/id_rsa"

- name: Copy foreman-proxy user ssh pubkey to server
  copy:
    mode: 0644
    owner: "{{ foreman_proxy_user }}"
    group: "{{ foreman_proxy_user }}"
    dest: "{{ foreman_proxy_user_homedir }}/.ssh/id_rsa.pub"
    content: "{{ foreman_ssh_public_key }}"

- name: get foreman user info
  getent:
    database: passwd
    key: "{{ foreman_runas_user }}"

- name: set foreman user home directory
  set_fact:
    foreman_runas_user_homedir: "{{ getent_passwd[foreman_runas_user][4] }}"

- name: Create foreman-proxy user ssh directory
  file:
    path: "/var/lib/foreman/ssh"
    state: directory
    owner: "{{ foreman_runas_user }}"
    group: "{{ foreman_runas_user }}"
    mode: 0755

- name: Ensure foreman-proxy .ssh symlink exists
  file:
    state: link
    src: /var/lib/foreman/ssh
    dest: "{{ foreman_runas_user_homedir }}/.ssh"
    owner: "{{ foreman_runas_user }}"
    group: "{{ foreman_runas_user }}"

- name: Copy foreman-proxy user ssh config
  copy:
    owner: "{{ foreman_runas_user }}"
    group: "{{ foreman_runas_user }}"
    mode: 0755
    dest: "{{ foreman_runas_user_homedir }}/.ssh/config"
    content: |
      StrictHostKeyChecking no
      UserKnownHostsFile /dev/null

- name: Copy ssh private key to server
  copy:
    mode: 0600
    owner: "{{ foreman_runas_user }}"
    group: "{{ foreman_runas_user }}"
    content: "{{ foreman_ssh_private_key }}"
    dest: "{{ foreman_runas_user_homedir }}/.ssh/id_rsa"

- name: Copy foreman-proxy user ssh pubkey to server
  copy:
    mode: 0644
    owner: "{{ foreman_runas_user }}"
    group: "{{ foreman_runas_user }}"
    dest: "{{ foreman_runas_user_homedir }}/.ssh/id_rsa.pub"
    content: "{{ foreman_ssh_public_key }}"

- name: Generate foreman database config from template
  template:
    src: etc/foreman/database.yml.j2
    dest: "{{ foreman_config_dir }}/database.yml"
    mode: 0755
    backup: yes
  notify: restart foreman
  register: db_config

- name: Get foreman database migration status
  command:
    cmd: foreman-rake db:migrate:status
  register: foreman_db_status
  changed_when: False
  failed_when: foreman_db_status.stderr |  regex_search('(?:rake\\saborted)')

- debug:
    msg: "{{ foreman_db_status }}"
  tags:
    - never
    - debug

- name: "Trigger foreman-rake  db:migrate and db:seed tasks"
  set_fact:
    foreman_migrate_db: True
  when: ( foreman_db_status.stdout_lines | length < 2 ) or
        ( foreman_db_status.stdout | regex_search('\\b(?:down)\\b') )

- debug:
    msg: "Foreman db needs migrating: {{ foreman_migrate_db | default(false) }}"
  tags:
    - never
    - debug

- name: "Perform initial database setup (db:migrate)"
  command: foreman-rake db:migrate
  register: migrate_results
  notify: restart foreman
  when: ( db_config is changed ) or
        ( settings_config is changed ) or
        ( foreman_migrate_db | default(false) )
  ignore_errors: yes

- fail:
    msg: "{{ migrate_results.stdout_lines }}"
  when: migrate_results.failed is defined and migrate_results.failed == True

- name: "Perform initial database seeding (db:seed)"
  command: foreman-rake db:seed
  register: seed_results
  notify: restart foreman
  when: ( db_config is changed ) or
        ( settings_config is changed ) or
        ( foreman_migrate_db | default(false) )
  ignore_errors: yes

- fail:
    msg: "{{ seed_results.stdout_lines }}"
  when: seed_results.failed is defined and seed_results.failed == True

- name: set foreman admin password
  command: "foreman-rake permissions:reset username={{ foreman_admin_user }} password={{ foreman_admin_password }}"
  when: ( settings_config is changed ) or
        ( foreman_migrate_db | default(false) )
  no_log: True

- name: template foreman-proxy settings.yml
  template:
    src: etc/foreman-proxy/settings.yml.j2
    dest: "{{ foreman_proxy_config_dir }}/settings.yml"
    backup: yes
  notify:
    - restart foreman-proxy

- name: "Template /etc/foreman-proxy/settings.d files"
  template:
    src: '{{ item.src }}'
    dest: '{{ foreman_proxy_config_dir }}/settings.d/{{ item.path }}'
    backup: yes
  with_filetree: 'templates/etc/foreman-proxy/settings.d'
  when: item.state == 'file'
  notify:
    - restart foreman-proxy

- name: fix dhcp config directory permissions
  file:
    path: "{{ foreman_proxy_dhcp_config_dir }}"
    mode: 0755
    state: directory
  when: foreman_proxy_dhcp
  notify:
    - restart foreman-proxy


- name: ensure correct permissions for tftp pxe directories
  file:
    path: "{{ foreman_proxy_tftp_dir }}"
    owner: "{{ foreman_proxy_user }}"
    group: "{{ foreman_proxy_group }}"
    recurse: yes
    state: directory
  when: foreman_proxy_tftp

- name: Download foreman auto-discovery image
  unarchive:
    src: http://downloads.theforeman.org/discovery/releases/latest/fdi-image-latest.tar
    dest: "{{ foreman_proxy_tftp_dir }}/boot"
    remote_src: yes
    owner: "{{ foreman_proxy_user }}"
    group: "{{ foreman_proxy_group }}"
    creates: "{{ foreman_proxy_tftp_dir }}/boot/fdi-image"
  register: fdi_download
  until: not fdi_download.failed
  retries: 5
  delay: 5
  when: foreman_proxy_tftp
